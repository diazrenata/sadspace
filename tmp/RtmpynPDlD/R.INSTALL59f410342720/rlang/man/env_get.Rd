% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env-binding.R
\name{env_get}
\alias{env_get}
\alias{env_get_list}
\title{Get an object in an environment}
\usage{
env_get(env = caller_env(), nm, default, inherit = FALSE)

env_get_list(env = caller_env(), nms, default, inherit = FALSE)
}
\arguments{
\item{env}{An environment.}

\item{nm, nms}{Names of bindings. \code{nm} must be a single string.}

\item{default}{A default value in case there is no binding for \code{nm}
in \code{env}.}

\item{inherit}{Whether to look for bindings in the parent
environments.}
}
\value{
An object if it exists. Otherwise, throws an error.
}
\description{
\code{env_get()} extracts an object from an enviroment \code{env}. By
default, it does not look in the parent environments.
\code{env_get_list()} extracts multiple objects from an environment into
a named list.
}
\examples{
parent <- child_env(NULL, foo = "foo")
env <- child_env(parent, bar = "bar")

# This throws an error because `foo` is not directly defined in env:
# env_get(env, "foo")

# However `foo` can be fetched in the parent environment:
env_get(env, "foo", inherit = TRUE)

# You can also avoid an error by supplying a default value:
env_get(env, "foo", default = "FOO")
}
